<?xml version="1.0"?>
<ruleset name="LogioSosoProject">
    <config name="installed_paths" value="../../slevomat/coding-standard"/><!-- relative path from PHPCS source location -->
    <arg name="colors" />
    <arg name="parallel" value="75" />

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Class names MUST be declared in StudlyCaps. -->
    <rule ref="Squiz.Classes.ValidClassName"/>

    <!-- Class constants MUST be declared in all upper case with underscore separators. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />

    <!--    Complexity check, max. complex right now is 102, BUT there is NeonDecoder in Grudl style with 211 destroying all hopes -->
    <!--    <rule ref="SlevomatCodingStandard.Complexity.Cognitive">-->
    <!--        <properties>-->
    <!--            <property name="maxComplexity" value="105"/>-->
    <!--        </properties>-->
    <!--    </rule>-->

    <!--  Add space after ! negation -->
    <rule ref="Generic.Formatting.SpaceAfterNot" />

    <!--    hard to grasp, usually pretty much ok things in dull implementations -->
    <!--    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />-->

    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <!-- <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/> -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Negative number needs to be like -1, not '- 1' etc . -->
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing" />

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <!-- <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/> -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <!--    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/> not that nice to read -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <!-- <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/> kravina, chtel sem to vzit namilost, ale proste se mi to blbe cte, takze nope 12.02.2021 -->
    <!-- <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/> kravina -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/>

    <!-- START formatting -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Covers rule: Use single and double quotes when appropriate. If you're not evaluating anything in the string, use single quotes. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>

    <!-- Formatovani parametru funkci -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
    </rule>

    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="exact" value="false"/>
            <property name="indent" value="4"/>
            <property name="tabIndent" value="false"/>
            <!-- <property name="ignoreIndentationTokens" type="array" value="T_HEREDOC,T_NOWDOC,T_INLINE_HTML,T_COMMENT"/> -->
        </properties>
    </rule>

    <!-- Implied through the examples: align the assignment operator in a block of assignments. -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="40"/>
        </properties>
    </rule>

    <!-- Don't check function braces, but check closure braces. -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="spacing" value="1" />
        </properties>
    </rule>

    <!-- Covers rule: Braces should always be used, even when they are not required. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ControlSignature">
        <properties>
            <property name="requiredSpacesBeforeColon" value="1" />
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>

    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="annotationsGroups" type="array">
                <element value="
				@var,
				@param,
				@return,
			"/>
            </property>
        </properties>
    </rule>

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Covers rule: When type casting, do it like so: $foo = (boolean) $bar; -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- All line endings should be \n. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- No whitespaces at the line ends -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>

    <!-- Lowercase PHP constants, like true, false and null. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Lowercase PHP keywords, like class, function and case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- Object operators should not have whitespace around them unless they are multi-line. -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- References to self in a class should be lower-case and not have extraneous spaces,
         per implicit conventions in the core codebase; the NotUsed code refers to using the
         fully-qualified class name instead of self, for which there are instances in core. -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.SelfMemberReference.NotUsed">
        <severity>0</severity>
    </rule>

    <!-- END formatting -->

    <!-- Covers rule: Class names should use capitalized words separated by underscores. -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>

    <!-- Covers rule: Constants should be in all upper-case with underscores separating words. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Arrays -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />

    <!-- Comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>


    <!-- extremne narocne k dodelani, jsou to tisice malych zmen -->
    <!--
    <rule ref="Squiz.Commenting.FunctionComment">
        <properties>
            <property name="skipIfInheritdoc" value="true" />
        </properties>
    </rule>
    <rule ref="Squiz.Commenting.ClassComment"/>
    -->


    <!-- Variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />

    <!-- TypeHints -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint" />

    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.UselessAnnotation"/>
        <properties>
            <property name="enableNativeTypeHint" value="false" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="spacesCountAroundEqualsSign" value="0" /><!-- Protoze muj autoformatter to tak radsi -->
            <property name="declareOnFirstLine" value="true" /><!-- Protoze muj autoformatter to tak radsi -->
        </properties>
    </rule>

    <rule ref="Squiz.Scope.MemberVarScope" />
    <rule ref="Squiz.Scope.MethodScope" />
    <rule ref="Squiz.Scope.StaticThisUsage" />
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <rule ref="Squiz.Classes.ClassDeclaration" />
    <rule ref="Squiz.Classes.ClassFileName" />
    <rule ref="Squiz.Classes.ValidClassName" />
</ruleset>